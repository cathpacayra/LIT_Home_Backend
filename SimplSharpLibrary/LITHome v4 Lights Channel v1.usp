/*******************************************************************************************
  SIMPL+ Module Information
*******************************************************************************************/
/*
Dealer Name: Leading IT Middle East
System Name:
System Number:
Programmer: Jonathan Sinasac
Comments:
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "46" "LITHome v4" // Custom
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "LITHomeLibrary"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
DIGITAL_INPUT Toggle, Set_On, Set_Off;
ANALOG_INPUT Channel_Level_Set;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT Is_On, Is_Off;
ANALOG_OUTPUT Channel_Level_fb;
// STRING_OUTPUT 

/*******************************************************************************************
  Parameters
*******************************************************************************************/
INTEGER_PARAMETER Area_Num, Channel_Num;
STRING_PARAMETER Channel_Name[50];

/*******************************************************************************************
  Parameter Properties
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Global Variables
*******************************************************************************************/
INTEGER bOutput;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

LightsChannelV1 LightsChannelV1_Obj; // calling the public class name from LITHomeLibrary

/*******************************************************************************************
  Event Handlers
*******************************************************************************************/
// EVENTHANDLER IntegerEventHandler(LightsChannelV1 sender, LightEventArgs args)
// {
// 	aOutput = args.IntData;
// }
// EVENTHANDLER StringEventHandler(LightsChannelV1 sender, LightEventArgs args)
// {
// 	sOutput = args.StringData;
// }

/*
EVENTHANDLER BooleanEventHandler(LightsChannelV1 sender, LightEventArgs args)
{
    if(args.IntData <= 0)
    {
        bOutput = 0;
    }
    else
    {
        bOutput = 1;
    }
}
*/


// EVENTHANDLERs in usp is NOT reusable across multiple functions; 
// EventHandler objects in .cs class is reusable.

EVENTHANDLER Is_On_EventHandler(LightsChannelV1 sender, LightEventArgs args)
{
    if(args.IntData <= 0)
    {
        Is_On = 0;
        Is_Off = 1;
    }
    else
    {
        Is_Off = 0;
        Is_On = 1;
    }
}

EVENTHANDLER Channel_Level_fb_EventHandler(LightsChannelV1 sender, LightEventArgs args)
{
    Channel_Level_fb = args.IntData;
}





PUSH Toggle
{
    integer Is_On_value;
    Is_On_value = Is_On;
    LightsChannelV1_Obj.TogglePressed(Is_On_value);

    
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE Channel_Level_Set
{
    integer value;
	value = Channel_Level_Set;
    LightsChannelV1_Obj.Channel_Level_Set(value);
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()

*******************************************************************************************/

FUNCTION Main()
{
    RegisterEvent(LightsChannelV1_Obj,BooleanEvent,Is_On_EventHandler);
	RegisterEvent(LightsChannelV1_Obj,IntegerEvent,Channel_Level_fb_EventHandler);
	// RegisterEvent(LightsChannelV1_Obj,StringEvent,StringEventHandler);
}
